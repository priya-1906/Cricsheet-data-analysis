import os
import json
from datetime import datetime
from mysql.connector import Error
from db_connection import get_connection

def parse_info(info: dict):
    teams = info.get("teams", [])
    team1 = teams[0] if len(teams) > 0 else None
    team2 = teams[1] if len(teams) > 1 else None

    venue = info.get("venue")
    city = info.get("city")
    gender = info.get("gender")
    match_type = info.get("match_type")

    # competition can be under 'competition' or under event.name
    competition = info.get("competition")
    if competition is None:
        event = info.get("event", {}) or {}
        competition = event.get("name")

    # date
    dates = info.get("dates", [])
    match_date = None
    if dates:
        try:
            match_date = datetime.strptime(dates[0], "%Y-%m-%d").date()
        except Exception:
            match_date = None

    # outcome
    outcome = info.get("outcome", {}) or {}
    winner = outcome.get("winner")
    result = outcome.get("result")  # draw/tie/no result
    win_by = outcome.get("by")
    if isinstance(win_by, dict):
        win_by = ", ".join(f"{k} {v}" for k, v in win_by.items())
    elif win_by is None:
        win_by = ""

    # toss
    toss = info.get("toss", {}) or {}
    toss_winner = toss.get("winner")
    toss_decision = toss.get("decision")

    return {
        "team1": team1, "team2": team2, "venue": venue, "city": city,
        "gender": gender, "match_type": match_type, "competition": competition,
        "match_date": match_date, "winner": winner, "result": result,
        "win_by": win_by, "toss_winner": toss_winner, "toss_decision": toss_decision
    }

def insert_matches_from_folder(folder_path: str, table_name: str):
    files = [f for f in os.listdir(folder_path) if f.endswith(".json")]
    if not files:
        print(f"[WARN] No JSON files in: {folder_path}")
        return

    conn = None
    try:
        conn = get_connection()
        cur = conn.cursor()

        sql = f"""
            INSERT INTO {table_name} (
                match_id, match_date, venue, city, gender, match_type, competition,
                winner, win_by, team1, team2, toss_winner, toss_decision, result
            ) VALUES (
                %s, %s, %s, %s, %s, %s, %s,
                %s, %s, %s, %s, %s, %s, %s
            )
            ON DUPLICATE KEY UPDATE
                match_date=VALUES(match_date),
                venue=VALUES(venue),
                city=VALUES(city),
                gender=VALUES(gender),
                match_type=VALUES(match_type),
                competition=VALUES(competition),
                winner=VALUES(winner),
                win_by=VALUES(win_by),
                team1=VALUES(team1),
                team2=VALUES(team2),
                toss_winner=VALUES(toss_winner),
                toss_decision=VALUES(toss_decision),
                result=VALUES(result);
        """

        count = 0
        for i, file_name in enumerate(files, 1):
            match_id = file_name[:-5]  # strip .json
            file_path = os.path.join(folder_path, file_name)
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            info = data.get("info", {})
            rec = parse_info(info)

            vals = (
                match_id,
                rec["match_date"], rec["venue"], rec["city"], rec["gender"],
                rec["match_type"], rec["competition"], rec["winner"], rec["win_by"],
                rec["team1"], rec["team2"], rec["toss_winner"], rec["toss_decision"], rec["result"]
            )
            cur.execute(sql, vals)
            count += 1
            if i % 500 == 0:
                print(f"...processed {i} files")

        conn.commit()
        print(f"[OK] Inserted/updated {count} rows in {table_name}")

    except Error as e:
        print(f"[DB ERROR] {e}")
    except Exception as ex:
        print(f"[PARSE ERROR] {ex}")
    finally:
        try:
            if conn and conn.is_connected():
                cur.close()
                conn.close()
        except:
            pass

if __name__ == "__main__":
    insert_matches_from_folder("../cricsheet_json/odis", "odi_matches")
    insert_matches_from_folder("../cricsheet_json/t20s", "t20_matches")
    insert_matches_from_folder("../cricsheet_json/ipl", "ipl_matches")
